#!/home/maria/quack/venv/bin/python
import unittest
import sys
sys.path.insert(0,"/home/maria/quack/app")

from DLL import DoubleLinkedListCell
from DLL import DoubleLinkedList


class TestDLL(unittest.TestCase):
    def test_push_give1(self):
        my = DoubleLinkedList();
        my.push(99)
        self.assertEqual(my.give(0), 99)
        my.push('ninety nine')
        self.assertEqual(my.give(1), 'ninety nine')
        self.assertEqual(my.give(0), 99)
   
    def test_addTo(self):
        my = DoubleLinkedList()
        my.addTo('firs', 0)
        self.assertEqual(my.give(0),'firs')
        my.addTo('second',0)
        self.assertEqual(my.give(0), 'second')
        self.assertEqual(my.give(1), 'firs')
        my.addTo(0,1)
        self.assertEqual(my.give(0), 'second')
        self.assertEqual(my.give(1), 0)
        self.assertEqual(my.give(2), 'firs')
        my.length = 0
        my.first__item = None
        my.last__item = None
    
    def test_unshift(self):
        my = DoubleLinkedList()
        my.unshift('first')
        self.assertEqual(my.give(0),'first')
        my.unshift('second')
        self.assertEqual(my.give(0), 'second')
        self.assertEqual(my.give(1), 'first')
        my.unshift(0)
        self.assertEqual(my.give(1), 'second')
        self.assertEqual(my.give(0), 0)
        self.assertEqual(my.give(2), 'first') 


    def test_pop(self):
        my = DoubleLinkedList()
        my.unshift(88)
        my.pop()
        #self.assertEqual(my.give(0), None)
        my.unshift(2)
        my.unshift(4)
        my.push(63)
        self.assertEqual(my.give(1), 2)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(2), 63) 
        #self.assertEqual(my.give(3), 3)
        #self.assertEqual(my.give(4), None)
        my.pop()
        self.assertEqual(my.give(1), 2)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(2), None)
        my.push(28)
        self.assertEqual(my.give(1), 2)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(2), 28)
        self.assertEqual(my.give(3), None)

        
       
    def test_shift(self):
        my = DoubleLinkedList()
        my.unshift(88)
        my.shift()
        self.assertEqual(my.give(0), None)
        my.push(2)
        my.push(4)
        my.shift()
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(1), None)
        my.push(2)
        my.push(63)
        self.assertEqual(my.give(1), 2)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(2), 63)
        #self.assertEqual(my.give(3), 3)
        #self.assertEqual(my.give(4), None)
        my.shift()
        self.assertEqual(my.give(1), 63)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(2), None)
        my.push(28)
        self.assertEqual(my.give(1), 63)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(2), 28)
        self.assertEqual(my.give(3), None)
 
   
    def test_delete(self):
        my = DoubleLinkedList()
        my.unshift(88)
        my.delete(88)
        self.assertEqual(my.give(0), None)
        my.unshift(2)
        my.unshift(4)
        my.delete(4)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(1), None)
        my.unshift(4)
        my.delete(2)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(1), None)
        my.delete(4)
        self.assertEqual(my.give(0), None)
        self.assertEqual(my.give(1), None)
        my.unshift(2)
        my.unshift(4)
        my.push(63)
        self.assertEqual(my.give(1), 2)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(2), 63)
        #self.assertEqual(my.give(3), 3)
        #self.assertEqual(my.give(4), None)
        my.delete(4)
        self.assertEqual(my.give(1), 63)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(2), None)
        my.push(28)
        self.assertEqual(my.give(1), 63)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(2), 28)
        self.assertEqual(my.give(3), None)

    

    def test_first_last(self):
        my2 = DoubleLinkedList()
        my2.first__item = None
        my2.last__item = None
        my2.length = 0  
        my2.addTo(100, 0)
        #a = my.first()
        #self.assertEqual(a.elem,100)
        self.assertEqual(my2.last().elem, 100)
        my2.addTo(200, 0)
        self.assertEqual(my2.first().elem,200)
        self.assertEqual(my2.last().elem, 100)
        my2.addTo(300, 2) 
        #print(my2.give(0))
        #print(my2.give(1))
        #print(my2.give(2))
        self.assertEqual(my2.first().elem,200)
        self.assertEqual(my2.last().elem, 300)

    def test_contains(self):
        my = DoubleLinkedList()
        my.unshift(88)
        self.assertEqual(my.contains(88), True)
        self.assertEqual(my.contains(2), False)
        my.delete(88)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(2), False)
        self.assertEqual(my.give(0), None)
        my.unshift(2)
        my.unshift(4)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(2), True)
        self.assertEqual(my.contains(4), True)
        my.delete(4)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(2), True)
        self.assertEqual(my.contains(4), False)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(1), None)
        my.unshift(4)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(2), True)
        self.assertEqual(my.contains(4), True)
        my.delete(2)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(2), False)
        self.assertEqual(my.contains(4), True)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(1), None)
        my.delete(4)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(2), False)
        self.assertEqual(my.contains(4), False)
        self.assertEqual(my.give(0), None)
        self.assertEqual(my.give(1), None)
        my.unshift(2)
        my.unshift(4)
        my.push(63)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(63),True)
        self.assertEqual(my.contains(2), True)
        self.assertEqual(my.contains(4), True)

        self.assertEqual(my.give(1), 2)
        self.assertEqual(my.give(0), 4)
        self.assertEqual(my.give(2), 63)
        #self.assertEqual(my.give(3), 3)
        #self.assertEqual(my.give(4), None)
        my.delete(4)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(63),True)
        self.assertEqual(my.contains(2), True)
        self.assertEqual(my.contains(4), False)

        self.assertEqual(my.give(1), 63)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(2), None)
        my.push(28)
        self.assertEqual(my.give(1), 63)
        self.assertEqual(my.give(0), 2)
        self.assertEqual(my.give(2), 28)
        self.assertEqual(my.give(3), None)
        self.assertEqual(my.contains(88), False)
        self.assertEqual(my.contains(63),True)
        self.assertEqual(my.contains(2), True)
        self.assertEqual(my.contains(4), False)
        self.assertEqual(my.contains(28), True)



if __name__ == '__main__':
    unittest.main()

